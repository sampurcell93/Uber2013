// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var WorkArea;
    window.models = {};
    window.views = {};
    window.blueIcon = "../images/bluepoi.png";
    window.redIcon = "../images/redpoi.png";
    window.cc = function() {
      return _.each(arguments, function(arg) {
        return console.log(arg);
      });
    };
    window.views.MovieMap = Backbone.View.extend({
      el: '.wrapper',
      initialize: function() {
        this.infowindow = new google.maps.InfoWindow();
        this.mapOptions = {
          center: new google.maps.LatLng(37.7849300, -122.4294200),
          zoom: 12,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        this.map = new google.maps.Map(document.getElementsByClassName("map-canvas")[0], this.mapOptions);
        _.bindAll(this, "render", "unBlue", "unSelect", "bindAutoFill");
        this.markers = [];
        return this;
      },
      unSelect: function() {
        _.each(this.markers, function(marker) {
          return marker.setMap(null);
        });
        return this;
      },
      unBlue: function() {
        _.each(this.markers, function(marker) {
          return marker.setIcon(redIcon);
        });
        return this;
      },
      render: function() {
        var self;
        self = this;
        _.each(this.collection.models, function(location) {
          var loc, marker, view;
          loc = location.toJSON();
          if (!(loc.lng < -125 || loc.lng > -118 || loc.lat > 39 || loc.lat < 34)) {
            view = new views.LocationMarker({
              model: location,
              mapObj: self
            });
            marker = view.render().marker;
            self.markers.push(marker);
            return google.maps.event.addListener(marker, "click", function() {
              return window.app.navigate("/locations/" + loc._id, true);
            });
          }
        });
        this.plotPoints(0);
        window.app = new WorkArea;
        Backbone.history.start({
          pushBack: true
        });
        this.bindAutoFill();
        return this;
      },
      plotPoints: function(index) {
        var self;
        self = this;
        return window.setTimeout(function() {
          var progress;
          if (index < self.markers.length) {
            self.markers[index].setMap(self.map);
            self.plotPoints(index + 1);
            progress = document.querySelector("progress");
            return progress.value = (index / self.markers.length) * 100;
          } else {
            return $(document.body).removeClass().find(".modal").fadeOut("slow");
          }
        }, 10);
      },
      bindAutoFill: function() {
        var Underscore;
        Underscore = {
          compile: function(template) {
            var compiled;
            compiled = _.template(template);
            return {
              render: function(context) {
                return compiled(context);
              }
            };
          }
        };
        $(".js-search").typeahead([
          {
            name: 'movies',
            local: window.movies.models,
            header: '<h2><i class="icon-film"></i> Movies:</h2>',
            template: $("#movie-auto-item").html(),
            engine: Underscore,
            limit: 15
          }, {
            name: 'locations',
            local: window.locations.models,
            header: '<h2><i class="icon-compass-2"></i> Locations:</h2>',
            template: $("#location-auto-item").html(),
            engine: Underscore,
            limit: 15
          }
        ]);
        return this;
      },
      events: {
        "click .new-movies": function() {
          return _.each(window.movies.models, function(model) {
            var year;
            year = model.get("release_year");
            if (year > 2003 && year < new Date().getFullYear()) {
              return _.each(model.get("locations"), function(loc) {
                if (window.locations._byId[loc] != null) {
                  return window.locations._byId[loc].trigger("select");
                }
              });
            }
          });
        },
        "click .fav": function(e) {
          var $t, id, model, type;
          $t = $(e.currentTarget);
          type = $t.data("type");
          id = $t.data("id");
          if ($t.hasClass("icon-star")) {
            $t.removeClass("icon-star").addClass("icon-star-2").text("Unfavorite");
          } else if ($t.hasClass("icon-star-2")) {
            $t.removeClass("icon-star-2").addClass("icon-star").text("Favorite");
          }
          model = window[type]._byId[id];
          model.set("favorite", !model.get("favorite"));
          model.save();
          e.stopPropagation();
          e.stopimmediatePropagation();
          return e.preventDefault();
        },
        "click .js-show-all-points": function() {
          return _.each(this.markers, function(marker) {
            if (marker.getMap() === null) {
              return marker.setMap(window.map.map);
            }
          });
        }
      }
    });
    return WorkArea = Backbone.Router.extend({
      routes: {
        'movies/:id': "movie",
        'locations/:id': 'location',
        'favorites': function() {
          var locs, movs;
          locs = _.filter(window.locations.models, function(loc) {
            return typeof loc.get("favorite") !== "undefined" && loc.get("favorite") === true;
          });
          movs = _.filter(window.movies.models, function(mov) {
            return typeof mov.get("favorite") !== "undefined" && mov.get("favorite") === true;
          });
          return FullViewer.render("favtemplate", {
            locations: locs,
            movies: movs
          });
        }
      },
      movie: function(id) {
        var coords, model;
        model = window.movies._byId[id];
        coords = model.get("coords");
        if ((window.movies == null) || (model == null)) {
          return;
        }
        FullViewer.render("movtemplate", model.toJSON());
        window.map.unSelect().map.setZoom(12);
        _.each(coords.models, function(loc) {
          if (loc.marker != null) {
            loc.marker.setMap(window.map.map);
            return loc.marker.setIcon(redIcon);
          }
        });
        if (coords.last() != null) {
          return coords.last().trigger("zoomto");
        }
      },
      location: function(id) {
        var model;
        model = window.locations._byId[id];
        FullViewer.render("loctemplate", {
          location: model.toJSON(),
          movies: model.movies.toJSON()
        });
        window.map.unBlue();
        model.trigger("zoomto");
        return model.trigger("click");
      }
    });
  });

}).call(this);
