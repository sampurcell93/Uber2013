// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    window.cc = function() {
      return _.each(arguments, function(arg) {
        return console.log(arg);
      });
    };
    return window.MovieMap = Backbone.View.extend({
      el: '.wrapper',
      initialize: function() {
        this.infowindow = new google.maps.InfoWindow();
        this.mapOptions = {
          center: new google.maps.LatLng(37.7849300, -122.4294200),
          zoom: 13,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        this.map = new google.maps.Map(document.getElementsByClassName("map-canvas")[0], this.mapOptions);
        _.bindAll(this, "render");
        this.render();
        return this;
      },
      render: function() {
        var self;
        self = this;
        return this.plotMarker(this.collection.at(0));
      },
      plotMarker: function(movie) {
        var index, self;
        index = 1 + movie.collection.indexOf(movie);
        self = this;
        return window.setTimeout(function() {
          _.each(movie.get("coords").models, function(location) {
            var marker, view;
            if (location.plotted === true) {
              return true;
            }
            view = new MovieMarker({
              model: location,
              mapObj: self
            });
            marker = view.render().marker;
            self.collection.markers.push(marker);
            marker.setMap(self.map);
            google.maps.event.addListener(marker, "click", function() {
              cc(movie);
              FullViewer.render("loctemplate", {
                location: location.toJSON(),
                movies: location.movies.toJSON()
              });
              return cc("done");
            });
            return location.plotted = true;
          });
          if (self.collection.length > index) {
            return self.plotMarker(self.collection.at(index));
          } else {
            return $(document.body).removeClass().find(".modal").fadeOut("slow");
          }
        }, 8);
      },
      getMatches: function(e) {
        var $fill, $t, matches, query;
        $t = $(e.currentTarget);
        query = $t.val();
        cc(query);
        matches = this.collection.search(query);
        $fill = $(".auto-list").empty();
        _.each(matches, function(match) {
          var listItem;
          listItem = new window.MovieAutoItem({
            model: match,
            template: $("#movie-list-item").html()
          });
          cc(listItem.template);
          return $fill.append(listItem.render().el);
        });
        return e.stopPropagation();
      },
      events: {
        'keyup .js-search': "getMatches",
        'keydown .js-search': "getMatches",
        'click .icon-search': function(e) {
          return e.preventDefault();
        }
      }
    });
  });

}).call(this);
