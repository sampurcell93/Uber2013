// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var WorkArea;
    window.models = {};
    window.views = {};
    window.blueIcon = "../images/bluepoi.png";
    window.redIcon = "../images/redpoi.png";
    window.cc = function() {
      return _.each(arguments, function(arg) {
        return console.log(arg);
      });
    };
    window.views.MovieMap = Backbone.View.extend({
      el: '.wrapper',
      initialize: function() {
        this.infowindow = new google.maps.InfoWindow();
        this.mapOptions = {
          center: new google.maps.LatLng(37.7849300, -122.4294200),
          zoom: 13,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        this.map = new google.maps.Map(document.getElementsByClassName("map-canvas")[0], this.mapOptions);
        _.bindAll(this, "render");
        return this;
      },
      unSelect: function() {
        cc(this);
        return _.each(this.collection.markers, function(marker) {
          if (marker.getIcon() !== redIcon) {
            return marker.setIcon(redIcon);
          }
        });
      },
      render: function() {
        var self;
        self = this;
        _.each(this.collection.models, function(movie) {
          return _.each(movie.coords.models, function(location) {
            var marker, view;
            if (location.plotted === true) {
              return true;
            }
            view = new views.LocationMarker({
              model: location,
              mapObj: self
            });
            marker = view.render().marker;
            self.collection.markers.push(marker);
            marker.setMap(self.map);
            google.maps.event.addListener(marker, "click", function() {
              return window.app.navigate("/locations/" + location.get("_id"), true);
            });
            return location.plotted = true;
          });
        });
        $(document.body).removeClass().find(".modal").fadeOut("slow");
        window.app = new WorkArea;
        Backbone.history.start({
          pushBack: true
        });
        return this.bindAutoFill();
      },
      bindAutoFill: function() {
        var Underscore;
        Underscore = {
          compile: function(template) {
            var compiled;
            compiled = _.template(template);
            return {
              render: function(context) {
                return compiled(context);
              }
            };
          }
        };
        return $(".js-search").typeahead([
          {
            name: 'movies',
            local: window.movies.models,
            header: '<h2><i class="icon-film"></i> Movies:</h2>',
            template: $("#movie-auto-item").html(),
            engine: Underscore,
            limit: 15
          }, {
            name: 'locations',
            local: window.locations.models,
            header: '<h2><i class="icon-compass-2"></i> Locations:</h2>',
            template: $("#location-auto-item").html(),
            engine: Underscore,
            limit: 15
          }
        ]);
      },
      events: {
        "click .new-movies": function() {
          var movies;
          return movies = _.each(this.collection.models, function(model) {
            var year;
            year = model.get("release_year");
            if (year > 2003 && year < new Date().getFullYear()) {
              return _.each(model.coords.models, function(loc) {
                cc(" a location");
                return loc.trigger("select");
              });
            }
          });
        }
      }
    });
    return WorkArea = Backbone.Router.extend({
      routes: {
        'movies/:id': "movie",
        'locations/:id': 'location'
      },
      movie: function(id) {
        var item, model;
        if (window.movies == null) {
          return;
        }
        model = window.movies.findWhere({
          _id: id
        });
        item = model.toJSON();
        item.coords = model.coords;
        FullViewer.render("movtemplate", item);
        window.map.unSelect();
        return _.each(model.coords.models, function(loc) {
          if (loc.marker != null) {
            return loc.marker.setIcon(blueIcon);
          }
        });
      },
      location: function(id) {
        var model;
        model = window.locations.findWhere({
          _id: id
        });
        FullViewer.render("loctemplate", {
          location: model.toJSON(),
          movies: model.movies.toJSON()
        });
        return model.trigger("zoomto");
      }
    });
  });

}).call(this);
