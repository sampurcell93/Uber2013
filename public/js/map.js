// Generated by CoffeeScript 1.6.3
(function() {
  var WorkArea;

  $(function() {
    window.models = {};
    return window.views = {};
  });

  window.cc = function() {
    return _.each(arguments, function(arg) {
      return console.log(arg);
    });
  };

  Number.prototype.alphaNumeric = function() {
    var key;
    key = this.valueOf();
    return (key >= 48 && key <= 57) || (key >= 65 && key <= 90) || (key >= 97 && key <= 122);
  };

  window.MovieMap = Backbone.View.extend({
    el: '.wrapper',
    initialize: function() {
      var Underscore;
      this.infowindow = new google.maps.InfoWindow();
      this.mapOptions = {
        center: new google.maps.LatLng(37.7849300, -122.4294200),
        zoom: 13,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      this.map = new google.maps.Map(document.getElementsByClassName("map-canvas")[0], this.mapOptions);
      _.bindAll(this, "render");
      this.render();
      Underscore = {
        compile: function(template) {
          var compiled;
          compiled = _.template(template);
          return {
            render: function(context) {
              return compiled(context);
            }
          };
        }
      };
      this.$(".js-search").typeahead([
        {
          name: 'movies',
          local: typeaheadmovies,
          header: '<h2><i class="icon-film"></i> Movies:</h2>',
          template: $("#movie-auto-item").html(),
          engine: Underscore,
          limit: 15
        }, {
          name: 'locations',
          local: typeaheadlocations,
          header: '<h2><i class="icon-compass-2"></i> Locations:</h2>',
          template: $("#location-auto-item").html(),
          engine: Underscore,
          limit: 15
        }
      ]);
      return this;
    },
    render: function() {
      var self;
      self = this;
      return this.plotMarker(this.collection.at(0));
    },
    plotMarker: function(movie) {
      var index, self;
      index = 1 + movie.collection.indexOf(movie);
      self = this;
      return window.setTimeout(function() {
        _.each(movie.get("coords").models, function(location) {
          var marker, view;
          if (location.plotted === true) {
            return true;
          }
          view = new views.LocationMarker({
            model: location,
            mapObj: self
          });
          marker = view.render().marker;
          self.collection.markers.push(marker);
          marker.setMap(self.map);
          google.maps.event.addListener(marker, "click", function() {
            cc(movie);
            FullViewer.render("loctemplate", {
              location: location.toJSON(),
              movies: location.movies.toJSON()
            });
            return cc("done");
          });
          return location.plotted = true;
        });
        if (self.collection.length > index) {
          return self.plotMarker(self.collection.at(index));
        } else {
          return $(document.body).removeClass().find(".modal").fadeOut("slow");
        }
      }, 8);
    },
    getMatches: function(e) {},
    search: function(query) {
      var locmatches, moviematches, self;
      query = query.toLowerCase();
      self = this;
      cc(movie_table);
      moviematches = _.filter(movie_table, function(movie, key) {
        return key.indexOf(query) !== -1;
      });
      locmatches = _.filter(location_table, function(loc, address) {
        return address.indexOf(query) !== -1;
      });
      return {
        movies: moviematches,
        locations: locmatches
      };
    },
    events: {
      'keyup .js-search': "getMatches",
      'click .icon-search': function(e) {
        return e.preventDefault();
      }
    }
  });

  WorkArea = Backbone.Router.extend();

  Backbone.history.start();

  window.app = new WorkArea;

}).call(this);
