// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var WorkArea;
    window.models = {};
    window.views = {};
    window.blueIcon = "../images/bluepoi.png";
    window.redIcon = "../images/redpoi.png";
    window.views.MovieMap = Backbone.View.extend({
      el: '.wrapper',
      initialize: function() {
        this.infowindow = new google.maps.InfoWindow();
        this.mapOptions = {
          center: new google.maps.LatLng(37.7849300, -122.4294200),
          zoom: 3,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        this.map = new google.maps.Map(document.getElementsByClassName("map-canvas")[0], this.mapOptions);
        _.bindAll(this, "render");
        this.markers = [];
        return this;
      },
      unSelect: function() {
        _.each(this.markers, function(marker) {
          return marker.setMap(null);
        });
        return this;
      },
      unBlue: function() {
        _.each(this.markers, function(marker) {
          return marker.setIcon(redIcon);
        });
        return this;
      },
      render: function() {
        var self;
        self = this;
        _.each(this.collection.models, function(location) {
          var loc, marker, view;
          loc = location.toJSON();
          if (!(loc.lng < -125 || loc.lng > -118 || loc.lat > 39 || loc.lat < 34)) {
            view = new views.LocationMarker({
              model: location,
              mapObj: self
            });
            marker = view.render().marker;
            self.markers.push(marker);
            marker.setMap(self.map);
            return google.maps.event.addListener(marker, "click", function() {
              return window.app.navigate("/locations/" + loc._id, true);
            });
          }
        });
        $(document.body).removeClass().find(".modal").fadeOut("slow");
        window.app = new WorkArea;
        Backbone.history.start({
          pushBack: true
        });
        this.bindAutoFill();
        return this;
      },
      bindAutoFill: function() {
        var Underscore;
        Underscore = {
          compile: function(template) {
            var compiled;
            compiled = _.template(template);
            return {
              render: function(context) {
                return compiled(context);
              }
            };
          }
        };
        $(".js-search").typeahead([
          {
            name: 'movies',
            local: window.movies.models,
            header: '<h2><i class="icon-film"></i> Movies:</h2>',
            template: $("#movie-auto-item").html(),
            engine: Underscore,
            limit: 15
          }, {
            name: 'locations',
            local: window.locations.models,
            header: '<h2><i class="icon-compass-2"></i> Locations:</h2>',
            template: $("#location-auto-item").html(),
            engine: Underscore,
            limit: 15
          }
        ]);
        return this;
      },
      events: {
        "click .new-movies": function() {
          return _.each(window.movies.models, function(model) {
            var year;
            year = model.get("release_year");
            if (year > 2003 && year < new Date().getFullYear()) {
              return _.each(model.get("locations"), function(loc) {
                if (window.locations._byId[loc] != null) {
                  return window.locations._byId[loc].trigger("select");
                }
              });
            }
          });
        },
        "click .fav": function(e) {
          var $t, id, model, type;
          $t = $(e.currentTarget);
          type = $t.data("type");
          id = $t.data("id");
          if ($t.hasClass("icon-star")) {
            $t.removeClass("icon-star").addClass("icon-star-2").text("Unfavorite");
          } else if ($t.hasClass("icon-star-2")) {
            $t.removeClass("icon-star-2").addClass("icon-star").text("Favorite");
          }
          model = window[type]._byId[id];
          model.set("favorite", !model.get("favorite"));
          model.save();
          e.stopPropagation();
          e.stopimmediatePropagation();
          return e.preventDefault();
        },
        "click .js-show-all-points": function() {
          return _.each(this.markers, function(marker) {
            if (marker.getMap() === null) {
              return marker.setMap(window.map.map);
            }
          });
        }
      }
    });
    return WorkArea = Backbone.Router.extend({
      routes: {
        'movies/:id': "movie",
        'locations/:id': 'location',
        'favorites': function() {
          var locs, movs;
          locs = _.filter(window.locations.models, function(loc) {
            return typeof loc.get("favorite") !== "undefined" && loc.get("favorite") === true;
          });
          movs = _.filter(window.movies.models, function(mov) {
            return typeof mov.get("favorite") !== "undefined" && mov.get("favorite") === true;
          });
          return FullViewer.render("favtemplate", {
            locations: locs,
            movies: movs
          });
        }
      },
      movie: function(id) {
        var item, model;
        if (window.movies == null) {
          return;
        }
        model = window.movies._byId[id];
        item = model.toJSON();
        item.coords = model.coords;
        FullViewer.render("movtemplate", item);
        window.map.unSelect().map.setZoom(12);
        _.each(model.coords.models, function(loc) {
          if (loc.marker != null) {
            loc.marker.setMap(window.map.map);
            return loc.marker.setIcon(redIcon);
          }
        });
        if (model.coords.last() != null) {
          return model.coords.last().trigger("zoomto");
        }
      },
      location: function(id) {
        var model;
        model = window.locations._byId[id];
        FullViewer.render("loctemplate", {
          location: model.toJSON(),
          movies: model.movies.toJSON()
        });
        window.map.unBlue();
        model.trigger("zoomto");
        return model.trigger("click");
      }
    });
  });

  $(function() {
    var Locations, Movies, geocoder, models, views;
    views = window.views;
    models = window.models;
    String.prototype.sanitize = function() {
      return this.replace(/"/g, "").replace(/'/g, "");
    };
    window.models.Location = Backbone.Model.extend({
      url: function() {
        return "/locations/" + this.get("_id");
      },
      idAttribute: '_id',
      initialize: function() {
        var loc, value;
        this.movies = new Movies;
        loc = this.toJSON();
        this.value = value = loc.title;
        return this.tokens = [this.get("_id"), value];
      }
    });
    Locations = Backbone.Collection.extend({
      url: "/locations/",
      model: models.Location
    });
    window.models.Movie = Backbone.Model.extend({
      url: function() {
        return "/movies/" + this.get("_id");
      },
      idAttribute: '_id',
      initialize: function() {
        var movie;
        movie = this.toJSON();
        this.value = movie.title;
        return this.tokens = [movie._id, movie.director, movie.producer, movie.writer, movie.title, movie.actor_1, movie.actor_2, movie.actor_3];
      },
      parse: function(response) {
        var links, self;
        self = this;
        links = new Locations;
        _.each(response.locations, function(id) {
          var link;
          link = locations._byId[id];
          if (link != null) {
            link.movies.add(self);
            return links.add(link);
          }
        });
        this["coords"] = links;
        return response;
      }
    });
    Movies = Backbone.Collection.extend({
      url: '/movies/',
      model: models.Movie
    });
    window.views.LocationMarker = Backbone.View.extend({
      initialize: function() {
        var self;
        _.bindAll(this, "render");
        this.mapObj = this.options.mapObj;
        self = this;
        return this.listenTo(this.model, {
          "hide": function() {
            if (self.marker != null) {
              return self.marker.setMap(null);
            }
          },
          "zoomto": function() {
            var map;
            if (self.marker != null) {
              map = self.mapObj.map;
              map.panTo(self.marker.position);
              self.marker.setIcon(blueIcon);
              return self.marker.setMap(self.mapObj.map);
            }
          },
          "click": function() {
            if (self.marker != null) {
              return google.maps.event.trigger(self.marker, 'click');
            }
          },
          "select": function() {
            if (self.marker != null) {
              self.marker.setMap(window.map.map);
              return self.marker.setIcon(blueIcon);
            }
          }
        });
      },
      render: function() {
        var marker, pt;
        pt = new google.maps.LatLng(this.model.get("lat"), this.model.get("lng"));
        this.marker = marker = new google.maps.Marker({
          position: pt,
          animation: google.maps.Animation.DROP,
          title: this.model.get("title"),
          icon: redIcon
        });
        this.model.marker = marker;
        return this;
      }
    });
    window.views.FullMovieOrLocation = Backbone.View.extend({
      el: '.location-data',
      loctemplate: $("#full-view-location").html(),
      movtemplate: $("#full-view-movie").html(),
      favtemplate: $("#faves-template").html(),
      render: function(template, obj) {
        var content;
        content = $("<div/>").html(_.template(this[template], obj));
        this.$el.html(content);
        return this;
      }
    });
    window.FullViewer = new views.FullMovieOrLocation;
    window.movies = new Movies(window.movies);
    window.locations = new Locations(window.locations);
    window.map = new views.MovieMap;
    window.map.collection = locations;
    window.map.render();
    return geocoder = new google.maps.Geocoder();
  });

}).call(this);
