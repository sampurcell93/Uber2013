// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var Location, Locations, Movie, Movies, movies;
    window.jumptable = {};
    Location = Backbone.Model.extend({
      url: "/locations",
      initialize: function() {
        this.plotted = false;
        return this.movies = new Movies;
      }
    });
    Locations = Backbone.Collection.extend({
      model: Location
    });
    Movie = Backbone.Model.extend({
      url: "/locations",
      defaults: function() {
        return {
          locations: "Sorry, we don't have a location on record for this movie."
        };
      },
      parse: function(response) {
        var locs, self;
        self = this;
        locs = new Locations;
        _.each(response.coords, function(coord) {
          var loc;
          if (coord != null) {
            if (typeof jumptable[coord.title] === "undefined") {
              locs.add(loc = new Location(coord));
              loc.movies.add(self);
              return jumptable[coord.title] = loc;
            } else {
              locs.add(loc = jumptable[coord.title]);
              return loc.movies.add(self);
            }
          }
        });
        response["coords"] = locs;
        return response;
      }
    });
    Movies = Backbone.Collection.extend({
      url: '/movies/',
      model: Movie,
      initialize: function() {
        return this.markers = [];
      },
      search: function(query) {
        var matches, self;
        self = this;
        matches = _.filter(this.models, function(movie) {
          var match_str;
          match_str = _.template($("#concat").html(), movie.toJSON());
          return match_str.indexOf(query) !== -1;
        });
        return matches;
      }
    });
    window.MovieMarker = Backbone.View.extend({
      template: $("#movie-marker-template").html(),
      initialize: function() {
        var self;
        _.bindAll(this, "render");
        this.mapObj = this.options.mapObj;
        self = this;
        return this.listenTo(this.model, "hide", function() {
          if (self.marker != null) {
            return self.marker.setMap(null);
          }
        });
      },
      render: function() {
        var marker, pt;
        pt = new google.maps.LatLng(this.model.get("lat"), this.model.get("lng"));
        this.marker = marker = new google.maps.Marker({
          position: pt,
          animation: google.maps.Animation.DROP,
          title: this.model.get("title")
        });
        this.model.marker = marker;
        return this;
      }
    });
    window.MovieAutoItem = Backbone.View.extend({
      template: $("#movie-auto-item").html(),
      tagName: 'li',
      render: function() {
        this.$el.html(_.template(this.template, this.model.toJSON()));
        return this;
      }
    });
    movies = new Movies;
    return movies.fetch({
      success: function(coll) {
        return window.map = new MovieMap({
          collection: coll
        });
      }
    });
  });

}).call(this);
