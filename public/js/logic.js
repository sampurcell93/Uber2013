// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var Locations, Movies, blueIcon, models, movies, redIcon, views;
    views = window.views;
    models = window.models;
    window.location_table = {};
    window.movie_table = {};
    window.typeaheadmovies = [];
    window.typeaheadlocations = [];
    blueIcon = "../images/bluepoi.png";
    redIcon = "../images/redpoi.png";
    window.models.Location = Backbone.Model.extend({
      url: "/locations",
      initialize: function() {
        var loc, value;
        this.plotted = false;
        this.movies = new Movies;
        loc = this.toJSON();
        value = loc.title;
        return typeaheadlocations.push({
          value: value,
          tokens: [value]
        });
      }
    });
    Locations = Backbone.Collection.extend({
      model: Location
    });
    window.models.Movie = Backbone.Model.extend({
      url: "/locations",
      initialize: function() {
        var compressed, i, movie, tokens, value, _i;
        this.compressed = compressed = (_.template($("#concat").html(), this.toJSON())).toLowerCase();
        movie_table[compressed] = this;
        movie = this.toJSON();
        value = movie.title;
        tokens = [this.compressed, movie.director, movie.producer, movie.writer, movie.title];
        for (i = _i = 1; _i <= 4; i = ++_i) {
          if (tokens[i] != null) {
            tokens[i] = tokens[i].toLowerCase().split(" ").join("");
          }
        }
        return typeaheadmovies.push({
          value: value,
          tokens: tokens
        });
      },
      parse: function(response) {
        var locs, self;
        self = this;
        locs = new Locations;
        _.each(response.coords, function(coord) {
          var loc;
          if (coord != null) {
            if (typeof location_table[coord.title] === "undefined") {
              locs.add(loc = new models.Location(coord));
              loc.movies.add(self);
              return location_table[coord.title] = loc;
            } else {
              locs.add(loc = location_table[coord.title]);
              return loc.movies.add(self);
            }
          }
        });
        response["coords"] = locs;
        return response;
      }
    });
    Movies = Backbone.Collection.extend({
      url: '/movies/',
      model: models.Movie,
      initialize: function() {
        return this.markers = [];
      }
    });
    window.views.LocationMarker = Backbone.View.extend({
      initialize: function() {
        var self;
        _.bindAll(this, "render");
        this.mapObj = this.options.mapObj;
        self = this;
        return this.listenTo(this.model, {
          "hide": function() {
            if (self.marker != null) {
              return self.marker.setMap(null);
            }
          },
          "zoomto": function() {
            var map;
            cc("zoomto");
            if (self.marker != null) {
              map = self.mapObj.map;
              map.setZoom(15);
              map.panTo(self.marker.position);
              return google.maps.event.trigger(self.marker, 'click');
            }
          }
        });
      },
      render: function() {
        var marker, pt;
        pt = new google.maps.LatLng(this.model.get("lat"), this.model.get("lng"));
        this.marker = marker = new google.maps.Marker({
          position: pt,
          animation: google.maps.Animation.DROP,
          title: this.model.get("title"),
          icon: redIcon
        });
        this.model.marker = marker;
        return this;
      }
    });
    window.views.AutoItem = Backbone.View.extend({
      events: {
        'click': function(e) {
          cc(this);
          _.each(movies.markers, function(marker) {
            if (marker.getIcon() !== redIcon) {
              return marker.setIcon(redIcon);
            }
          });
          if (this.model instanceof models.Movie) {
            _.each(this.model.get("coords").models, function(loc) {
              if (loc.marker != null) {
                cc("location at " + loc.get("title"));
                return loc.marker.setIcon(blueIcon);
              }
            });
          } else {
            this.model.trigger("zoomto");
          }
          return e.stopPropagation();
        },
        'mouseover': function(e) {
          _.each(this.model.get("coords").models, function(loc) {
            if (loc.marker != null) {
              return loc.marker.setIcon(blueIcon);
            }
          });
          return e.stopPropagation();
        },
        'mouseout': function(e) {}
      }
    });
    window.views.FullMovieOrLocation = Backbone.View.extend({
      el: '.location-data',
      loctemplate: $("#full-view-location").html(),
      render: function(template, obj) {
        var content;
        content = $("<div/>").html(_.template(this[template], obj));
        this.$el.html(content);
        cc(content);
        return this;
      }
    });
    window.FullViewer = new views.FullMovieOrLocation;
    movies = new Movies;
    movies.fetch({
      success: function(coll) {
        return window.map = new MovieMap({
          collection: coll
        });
      }
    });
    return $(document).on("click", "h2", function() {
      var $t;
      $t = $(this);
      return console.log($t.data("movie-name"));
    });
  });

}).call(this);
