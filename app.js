// Generated by CoffeeScript 1.6.3
(function() {
  var MONGO_URI, ObjectID, app, db, express, port, _;

  _ = require('underscore');

  express = require('express');

  app = express();

  port = process.env.PORT || 6060;

  ObjectID = require('mongodb').ObjectID;

  app.listen(port, function() {
    return console.log("now listening on port " + port);
  });

  MONGO_URI = process.env.MONGOHQ_URL || "Uber2013";

  db = require("mongojs").connect(MONGO_URI, ['locations', "movies", "testing"]);

  app.configure(function() {
    app.use(express.logger("dev"));
    app.set("views", __dirname + "/views");
    app.set("view engine", "jade");
    app.use(express.errorHandler());
    app.locals.pretty = true;
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    return app.use(express["static"](__dirname + "/public"));
  });

  app.get("/", function(req, res) {
    return db.locations.find({}, function(err, found) {
      return res.render("index");
    });
  });

  app.get("/movies", function(req, res) {
    return db.movies.find({}, function(err, found) {
      if (!err) {
        return res.json(found);
      } else {
        return res.json({
          success: false
        });
      }
    });
  });

  app.get("/locations", function(req, res) {
    return db.locations.find({}, function(err, found) {
      if (!err) {
        return res.json(found);
      } else {
        return res.json({
          success: false
        });
      }
    });
  });

  app.put("/movies/:id", function(req, res) {
    var id;
    id = new ObjectID(req.params.id);
    return db.movies.update({
      _id: id
    }, {
      $set: {
        favorite: req.body.favorite
      }
    }, function(err) {
      if (!err) {
        return res.json({
          success: true
        });
      } else {
        return res.json({
          success: false
        });
      }
    });
  });

  app.put("/locations/:id", function(req, res) {
    var id;
    id = new ObjectID(req.params.id);
    return db.locations.update({
      _id: id
    }, {
      $set: {
        favorite: req.body.favorite
      }
    }, function(err) {
      if (!err) {
        return res.json({
          success: true
        });
      } else {
        return res.json({
          success: false
        });
      }
    });
  });

  app.use(function(req, res) {
    return res.render("404");
  });

}).call(this);
